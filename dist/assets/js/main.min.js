class Command{constructor(t,e){this.readLength=0,this._i=t,this._o=e,this.readLength=t.readLength+e.readLength}emulate(t,e){this._i.emulate(t,this._o,e)}fastEmulate(t){$(t.element).append(Command.DOMOpen(!1)+this._i._input.toString(this._i._input._text.length-1,!0,t,!1)+this._o.toString()+Command.DOMClose+Command.pendingCommand(t))}static pendingCommand(t){return Command.DOMOpen(!0)+Input.DOMOpen+Keystroke.prompt(t)+Keystroke.location(t)+t.pendingInput+Input.cursorHtml+Input.DOMClose+Command.DOMClose}static DOMOpen(t){return"<div class='command-container"+(t?" temp":"")+"'>"}}Command.DOMClose="</div>";class Emulator{constructor(t,e){this.user="root",this.sys="nout",this.location="~",this.pendingInput="",this.commands=t,this.element=e}emulate(){if(0===this.commands.length)return console.log("Emulate called on empty emulator. Aborting.."),1;this.commands.splice(0,1)[0].emulate(this,this.commands)}fastEmulate(){if(0===this.commands.length)return console.log("Fast emulate called on empty emulator. Aborting.."),1;for(;this.commands.length>0;){this.changeState(1),this.changeState(2),this.commands.splice(0,1)[0].fastEmulate(this),this.scrollBottom(),this.changeState(3)}}readUserInput(t){switch(!0){case 8===t.keyCode:this.scrollBottom(),this.undoChar(1);break;case t.keyCode>=65&&t.keyCode<=90:this.scrollBottom(),this.read(t.key);break;case 32===t.keyCode:this.scrollBottom(),this.read(" ");break;case 13===t.keyCode:this.scrollBottom(),this.evaluate(this.pendingInput);break;default:DEBUG&&console.log("unknown key pressed",t.keyCode,t)}}scrollBottom(){DEBUG&&console.log("scrolling to bottom of container");let t=$(this.element).parent();t.scrollTop(t.prop("scrollHeight"))}undoChar(t){this.pendingInput.slice(0,-t)}read(t){if(3!==this._state)return-1;DEBUG&&console.log("reading '"+t+"'.."),this.pendingInput+=t,$(".command-container.temp").replaceWith(Command.pendingCommand(emulator))}evaluate(t){DEBUG&&console.info("[EMULATOR] evaluating '"+t+"'..");this.commands.push(new Command(new Input(new Keystroke(t,"white",0)),new Output([new Line([new Keystroke("That didn't work..<br>Try something else?","yellow",0)])]))),this.fastEmulate()}changeState(t){switch(this._state=t,t){case 1:$(".command-container.temp").remove(),Emulator.logState(t,"emulating"),$(this.element).removeClass("hidden writing reading idle").addClass("emulating");break;case 2:Emulator.logState(t,"writing"),this.pendingInput="",$(this.element).removeClass("hidden emulating reading idle").addClass("writing");break;case 3:Emulator.logState(t,"reading"),$(this.element).removeClass("hidden emulating writing idle").addClass("reading");break;case 4:Emulator.logState(t,"hidden"),$(this.element).removeClass("emulating writing reading idle").addClass("hidden");break;default:this._state=-1,Emulator.logState(t,"idle"),$(this.element).removeClass("hidden emulating writing reading").addClass("idle")}}static logState(t,e){DEBUG&&console.info("[EMULATOR] changing state to '"+t+"',\n i.e.: '"+e+"'..")}}Emulator.readingSpeed=70,Emulator.emulationSpeed=120,Emulator.enterPause=500,Emulator.backspaceProb=.1,Emulator.idleProb=.2,Emulator.cursorInterval=700;class Input{constructor(t){this._input=t}emulate(t,e,n){t.changeState(1);const o=$(t.element).html();this._input.emulate(t,e,n,o)}static get cursorHtml(){return"<div class='cursor"+(cursorsCurrentlyShown?" shown":"")+"'></div>"}}Input.DOMOpen="<div class='input'><div class='line'>",Input.DOMClose="</div></div>";class Keystroke{constructor(t,e,n){const o=t;this.readLength=t.replace(/\s/g,"").length,this._text=o,this._css=e,this._tabs=n}toString(t,e,n,o){let a=e?Input.DOMOpen+Keystroke.prompt(n)+Keystroke.location(n):"";return a+=Keystroke._DOMOpen(this._css),a+="number"==typeof t?this._text.substring(0,t+1):this._text+Keystroke._tabString(this._tabs),a+=Keystroke._DOMClose,a+=o?Input.cursorHtml:"",a+=e?Input.DOMClose:""}emulate(t,e,n,o){this._type(t,e,n,o,0)}_type(t,e,n,o,a){const s=Command.DOMOpen(!1)+this.toString(a,!0,t,!0)+Command.DOMClose;if($(t.element).html(o+s),a>=this._text.length-1)setTimeout(function(){e.emulate(t,o,this.toString(void 0,!0,t))}.bind(this),Emulator.enterPause);else{const s=Math.random();let i=a;s<Emulator.backspaceProb?i=Math.max(0,a-1):s>=Emulator.backspaceProb+Emulator.idleProb&&(i=Math.min(a+1,this._text.length-1)),setTimeout(function(){this._type(t,e,n,o,i)}.bind(this),Emulator.emulationSpeed)}}static prompt(t){return"<span class='prompt'>"+t.user+"@"+t.sys+"</span>:"}static location(t){return"<span class='location'>"+t.location+"</span>&nbsp;"}static _DOMOpen(t){return"<span class='"+t+"'>"}static _tabString(t){return"&nbsp;".repeat(4*t)}}Keystroke._DOMClose="</span>";class Line{constructor(t){this.readLength=0,this._keystrokes=t;for(let e=0;e<t.length;e++)this.readLength+=t[e].readLength}toString(t,e){let n=Line._DOMOpen;for(let t=0;t<this._keystrokes.length;t++)n+=this._keystrokes[t].toString();return e&&(n+=Input.cursorHtml()),n+Line._DOMClose}}Line._DOMOpen="<div class='line'>",Line._DOMClose="</div>";class Output{constructor(t){this.readLength=0,this._output=t;for(let e=0;e<t.length;e++)this.readLength+=t[e].readLength}toString(){let t=Output._DOMOpen;for(let e=0;e<this._output.length;e++)t+=this._output[e].toString();return t+Output._DOMClose}pauseDuration(){const t=this.readLength*Emulator.readingSpeed;return DEBUG?.3*t:t}emulate(t,e,n){if(t.changeState(2),this.write(t,e,n),t.changeState(3),t.commands.length>0){const e=t.commands.splice(0,1);setTimeout(function(){e[0].emulate(t,t.commands)},this.pauseDuration())}}write(t,e,n){$(t.element).html(e+Command.DOMOpen(!1)+n+this.toString()+Command.DOMClose+Command.pendingCommand(t)),t.scrollBottom()}}Output._DOMOpen="<div class='output'>",Output._DOMClose="</div>";const DEBUG=!0,PACKAGE_TAG="[terminal-emulator] - ";let cursorBlinking,cursorsCurrentlyShown=!0;function terminalEmulatorInit(){return DEBUG&&console.log(PACKAGE_TAG+"DOM ready; initialising ..."),cursorBlinking=setInterval(cursorBlink,Emulator.cursorInterval),window.addEventListener?window.addEventListener("load",terminalEmulatorPageloadedWrapper,!1):window.attachEvent&&window.attachEvent("onload",terminalEmulatorPageloadedWrapper),"function"==typeof terminalEmulatorDOMReady?terminalEmulatorDOMReady():(console.warn(PACKAGE_TAG+"terminalEmulatorDOMReady() should be defined!"),1)}function terminalEmulatorPageloadedWrapper(){return DEBUG&&console.log(PACKAGE_TAG+"Page loaded; initialising trigger(s) ..."),"function"==typeof terminalEmulatorPageloaded?terminalEmulatorPageloaded():(console.warn(PACKAGE_TAG+"terminalEmulatorPageLoaded() should be defined!"),1)}function cursorBlink(){cursorsCurrentlyShown?($(".input .line .cursor").removeClass("shown"),cursorsCurrentlyShown=!1):($(".input .line .cursor").addClass("shown"),cursorsCurrentlyShown=!0)}document.addEventListener?document.addEventListener("DOMContentLoaded",terminalEmulatorInit,!1):document.attachEvent?document.attachEvent("onreadystatechange",terminalEmulatorInit):window.onload=terminalEmulatorInit;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvbW1hbmQuanMiLCJFbXVsYXRvci5qcyIsIklucHV0LmpzIiwiS2V5c3Ryb2tlLmpzIiwiTGluZS5qcyIsIk91dHB1dC5qcyIsIl9jb25maWcuanMiLCJpbmRleC5qcyJdLCJuYW1lcyI6WyJDb21tYW5kIiwiW29iamVjdCBPYmplY3RdIiwiaW5wdXQiLCJvdXRwdXQiLCJ0aGlzIiwicmVhZExlbmd0aCIsIl9pIiwiX28iLCJlbXVsYXRvciIsInF1ZXVlIiwiZW11bGF0ZSIsIiQiLCJlbGVtZW50IiwiYXBwZW5kIiwiRE9NT3BlbiIsIl9pbnB1dCIsInRvU3RyaW5nIiwiX3RleHQiLCJsZW5ndGgiLCJET01DbG9zZSIsInBlbmRpbmdDb21tYW5kIiwiSW5wdXQiLCJLZXlzdHJva2UiLCJwcm9tcHQiLCJsb2NhdGlvbiIsInBlbmRpbmdJbnB1dCIsImN1cnNvckh0bWwiLCJpc1RlbXAiLCJFbXVsYXRvciIsImNvbW1hbmRzIiwidXNlciIsInN5cyIsImNvbnNvbGUiLCJsb2ciLCJzcGxpY2UiLCJjaGFuZ2VTdGF0ZSIsImZhc3RFbXVsYXRlIiwic2Nyb2xsQm90dG9tIiwiZSIsImtleUNvZGUiLCJ1bmRvQ2hhciIsInJlYWQiLCJrZXkiLCJldmFsdWF0ZSIsIkRFQlVHIiwiY29udGFpbmVyIiwicGFyZW50Iiwic2Nyb2xsVG9wIiwicHJvcCIsIm4iLCJzbGljZSIsIl9zdGF0ZSIsInJlcGxhY2VXaXRoIiwiaW5mbyIsInB1c2giLCJPdXRwdXQiLCJMaW5lIiwibmV3U3RhdGUiLCJyZW1vdmUiLCJsb2dTdGF0ZSIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJzdGF0ZUlkIiwic3RhdGVOYW1lIiwicmVhZGluZ1NwZWVkIiwiZW11bGF0aW9uU3BlZWQiLCJlbnRlclBhdXNlIiwiYmFja3NwYWNlUHJvYiIsImlkbGVQcm9iIiwiY3Vyc29ySW50ZXJ2YWwiLCJwcmVFbXVsYXRpb25IdG1sIiwiaHRtbCIsImN1cnNvcnNDdXJyZW50bHlTaG93biIsInRleHQiLCJjc3MiLCJ0YWJzIiwicmVhbFRleHQiLCJyZXBsYWNlIiwiX2NzcyIsIl90YWJzIiwiY3V0b2ZmIiwiaXNJbnB1dCIsImluc2VydEN1cnNvciIsInJlcHJlc2VudGF0aW9uIiwiX0RPTU9wZW4iLCJzdWJzdHJpbmciLCJfdGFiU3RyaW5nIiwiX0RPTUNsb3NlIiwiX3R5cGUiLCJjdXJyZW50Q3V0b2ZmIiwic2V0VGltZW91dCIsImJpbmQiLCJsb3R0ZXJ5IiwiTWF0aCIsInJhbmRvbSIsIm5ld0N1dG9mZiIsIm1heCIsIm1pbiIsInJlcGVhdCIsImtleXN0cm9rZXMiLCJfa2V5c3Ryb2tlcyIsImkiLCJkaXNwbGF5Q3Vyc29yIiwiX291dHB1dCIsImR1cmF0aW9uIiwiaW5wdXRSZXByZXNlbnRhdGlvbiIsIndyaXRlIiwibmV4dENvbW1hbmQiLCJwYXVzZUR1cmF0aW9uIiwiUEFDS0FHRV9UQUciLCJjdXJzb3JCbGlua2luZyIsInRlcm1pbmFsRW11bGF0b3JJbml0Iiwic2V0SW50ZXJ2YWwiLCJjdXJzb3JCbGluayIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0ZXJtaW5hbEVtdWxhdG9yUGFnZWxvYWRlZFdyYXBwZXIiLCJhdHRhY2hFdmVudCIsInRlcm1pbmFsRW11bGF0b3JET01SZWFkeSIsIndhcm4iLCJ0ZXJtaW5hbEVtdWxhdG9yUGFnZWxvYWRlZCIsImRvY3VtZW50Iiwib25sb2FkIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFBQSxRQUNBQyxZQUFBQyxFQUFBQyxHQUNBQyxLQUFBQyxXQUFBLEVBQ0FELEtBQUFFLEdBQUFKLEVBQ0FFLEtBQUFHLEdBQUFKLEVBQ0FDLEtBQUFDLFdBQUFILEVBQUFHLFdBQUFGLEVBQUFFLFdBRUFKLFFBQUFPLEVBQUFDLEdBR0FMLEtBQUFFLEdBQUFJLFFBQUFGLEVBQUFKLEtBQUFHLEdBQUFFLEdBRUFSLFlBQUFPLEdBQ0FHLEVBQUFILEVBQUFJLFNBQUFDLE9BQUFiLFFBQUFjLFNBQUEsR0FDQVYsS0FBQUUsR0FBQVMsT0FBQUMsU0FBQVosS0FB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LEdBSUEsU0FBQUksY0FDQXpDLHVCQUNBN0QsRUFBQSx3QkFBQWlELFlBQUEsU0FDQVksdUJBQUEsSUFFQTdELEVBQUEsd0JBQUFrRCxTQUFBLFNBQ0FXLHVCQUFBLEdBNUNBaUQsU0FBQU4saUJBQ0FNLFNBQUFOLGlCQUFBLG1CQUFBSixzQkFBQSxHQUNBVSxTQUFBSixZQUNBSSxTQUFBSixZQUFBLHFCQUFBTixzQkFDQUcsT0FBQVEsT0FBQVgiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBDb21tYW5kIHtcbiAgY29uc3RydWN0b3IoaW5wdXQsIG91dHB1dCkge1xuICAgIHRoaXMucmVhZExlbmd0aCA9IDA7XG4gICAgdGhpcy5faSA9IGlucHV0OyAvLyBJbnB1dCBpbnN0YW5jZVxuICAgIHRoaXMuX28gPSBvdXRwdXQ7IC8vIE91dHB1dCBpbnN0YW5jZVxuICAgIHRoaXMucmVhZExlbmd0aCA9IGlucHV0LnJlYWRMZW5ndGggKyBvdXRwdXQucmVhZExlbmd0aDtcbiAgfVxuICBlbXVsYXRlKGVtdWxhdG9yLCBxdWV1ZSkge1xuICAgIC8qIGVtdWxhdGluZyBfaSBhc3luY2hyb25vdXNseSB0YWtlcyBjYXJlIG9mIF9vLCBhbmQgYWxsXG4gICAgZm9sbG93aW5nIGNvbW1hbmRzLiAqL1xuICAgIHRoaXMuX2kuZW11bGF0ZShlbXVsYXRvciwgdGhpcy5fbywgcXVldWUpO1xuICB9XG4gIGZhc3RFbXVsYXRlKGVtdWxhdG9yKSB7XG4gICAgJChlbXVsYXRvci5lbGVtZW50KS5hcHBlbmQoQ29tbWFuZC5ET01PcGVuKGZhbHNlKSArXG4gICAgdGhpcy5faS5faW5wdXQudG9TdHJpbmcodGhpcy5faS5faW5wdXQuX3RleHQubGVuZ3RoIC0gMSxcbiAgICAgIHRydWUsIGVtdWxhdG9yLCBmYWxzZSkgKyB0aGlzLl9vLnRvU3RyaW5nKCkgKyBDb21tYW5kLkRPTUNsb3NlICtcbiAgICBDb21tYW5kLnBlbmRpbmdDb21tYW5kKGVtdWxhdG9yKSk7XG4gIH1cbiAgc3RhdGljIHBlbmRpbmdDb21tYW5kKGVtdWxhdG9yKSB7XG4gICAgcmV0dXJuIENvbW1hbmQuRE9NT3Blbih0cnVlKSArIElucHV0LkRPTU9wZW4gKyBLZXlzdHJva2UucHJvbXB0KGVtdWxhdG9yKSArXG4gICAgS2V5c3Ryb2tlLmxvY2F0aW9uKGVtdWxhdG9yKSArIGVtdWxhdG9yLnBlbmRpbmdJbnB1dCArIElucHV0LmN1cnNvckh0bWwgK1xuICAgIElucHV0LkRPTUNsb3NlICsgQ29tbWFuZC5ET01DbG9zZTtcbiAgfVxuICBzdGF0aWMgRE9NT3Blbihpc1RlbXApIHtcbiAgICByZXR1cm4gXCI8ZGl2IGNsYXNzPSdjb21tYW5kLWNvbnRhaW5lclwiICtcbiAgICAoaXNUZW1wID8gXCIgdGVtcFwiIDogXCJcIikgKyBcIic+XCI7XG4gIH1cbn1cblxuLy8gXCJzdGF0aWMgcHJvcGVydGllc1wiXG5Db21tYW5kLkRPTUNsb3NlID0gXCI8L2Rpdj5cIjtcbiIsImNsYXNzIEVtdWxhdG9yIHtcbiAgY29uc3RydWN0b3IoY29tbWFuZHMsIGVsZW1lbnQpIHtcbiAgICB0aGlzLnVzZXIgPSBcInJvb3RcIjtcbiAgICB0aGlzLnN5cyA9IFwibm91dFwiO1xuICAgIHRoaXMubG9jYXRpb24gPSBcIn5cIjtcbiAgICB0aGlzLnBlbmRpbmdJbnB1dCA9IFwiXCI7XG4gICAgdGhpcy5jb21tYW5kcyA9IGNvbW1hbmRzO1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gIH1cbiAgZW11bGF0ZSgpIHtcbiAgICBpZih0aGlzLmNvbW1hbmRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uc29sZS5sb2coXCJFbXVsYXRlIGNhbGxlZCBvbiBlbXB0eSBlbXVsYXRvci4gQWJvcnRpbmcuLlwiKTtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICAvLyBzcGxpdCBpbnRvIGN1cnJlbnQgYW5kIHRhaWxcbiAgICBjb25zdCBjdXJyZW50Q29tbWFuZCA9IHRoaXMuY29tbWFuZHMuc3BsaWNlKDAsIDEpO1xuICAgIGN1cnJlbnRDb21tYW5kWzBdLmVtdWxhdGUodGhpcywgdGhpcy5jb21tYW5kcyk7XG4gIH1cbiAgZmFzdEVtdWxhdGUoKSB7XG4gICAgaWYodGhpcy5jb21tYW5kcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiRmFzdCBlbXVsYXRlIGNhbGxlZCBvbiBlbXB0eSBlbXVsYXRvci4gQWJvcnRpbmcuLlwiKTtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICB3aGlsZSh0aGlzLmNvbW1hbmRzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuY2hhbmdlU3RhdGUoMSk7XG4gICAgICB0aGlzLmNoYW5nZVN0YXRlKDIpO1xuICAgICAgY29uc3QgY3VycmVudENvbW1hbmQgPSB0aGlzLmNvbW1hbmRzLnNwbGljZSgwLCAxKTtcbiAgICAgIGN1cnJlbnRDb21tYW5kWzBdLmZhc3RFbXVsYXRlKHRoaXMpO1xuICAgICAgdGhpcy5zY3JvbGxCb3R0b20oKTtcbiAgICAgIHRoaXMuY2hhbmdlU3RhdGUoMyk7XG4gICAgfVxuICB9XG4gIHJlYWRVc2VySW5wdXQoZSkge1xuICAgIHN3aXRjaCh0cnVlKSB7XG4gICAgICBjYXNlIGUua2V5Q29kZSA9PT0gODogLy8gYmFja3NwYWNlXG4gICAgICAgIHRoaXMuc2Nyb2xsQm90dG9tKCk7XG4gICAgICAgIHRoaXMudW5kb0NoYXIoMSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBlLmtleUNvZGUgPj0gNjUgJiYgZS5rZXlDb2RlIDw9IDkwOiAvLyBhLVpcbiAgICAgICAgdGhpcy5zY3JvbGxCb3R0b20oKTtcbiAgICAgICAgdGhpcy5yZWFkKGUua2V5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGUua2V5Q29kZSA9PT0gMzI6IC8vIHNwYWNlXG4gICAgICAgIHRoaXMuc2Nyb2xsQm90dG9tKCk7XG4gICAgICAgIHRoaXMucmVhZChcIiBcIik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBlLmtleUNvZGUgPT09IDEzOiAvLyBlbnRlciBrZXlcbiAgICAgICAgdGhpcy5zY3JvbGxCb3R0b20oKTtcbiAgICAgICAgdGhpcy5ldmFsdWF0ZSh0aGlzLnBlbmRpbmdJbnB1dCk7XG4gICAgICAgIC8vIHRoaXMuY2hhbmdlU3RhdGUoMik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYoREVCVUcpIGNvbnNvbGUubG9nKFwidW5rbm93biBrZXkgcHJlc3NlZFwiLCBlLmtleUNvZGUsIGUpO1xuICAgIH1cbiAgfVxuICBzY3JvbGxCb3R0b20oKSB7XG4gICAgLy8gc2Nyb2xsIHRvIGJvdHRvbSBvZiBjb250YWluZXJcbiAgICBpZihERUJVRykgY29uc29sZS5sb2coXCJzY3JvbGxpbmcgdG8gYm90dG9tIG9mIGNvbnRhaW5lclwiKTtcbiAgICBsZXQgY29udGFpbmVyID0gJCh0aGlzLmVsZW1lbnQpLnBhcmVudCgpO1xuICAgIGNvbnRhaW5lci5zY3JvbGxUb3AoY29udGFpbmVyLnByb3AoXCJzY3JvbGxIZWlnaHRcIikpO1xuICB9XG4gIHVuZG9DaGFyKG4pIHtcbiAgICB0aGlzLnBlbmRpbmdJbnB1dC5zbGljZSgwLCAtbik7XG4gIH1cbiAgcmVhZChpbnB1dCkge1xuICAgIGlmKHRoaXMuX3N0YXRlICE9PSAzKSByZXR1cm4gLTE7XG4gICAgaWYoREVCVUcpIGNvbnNvbGUubG9nKFwicmVhZGluZyAnXCIgKyBpbnB1dCArIFwiJy4uXCIpO1xuICAgIHRoaXMucGVuZGluZ0lucHV0ICs9IGlucHV0O1xuICAgIC8vIHVwZGF0ZSBjdXJyZW50XG4gICAgJChcIi5jb21tYW5kLWNvbnRhaW5lci50ZW1wXCIpLnJlcGxhY2VXaXRoKENvbW1hbmQucGVuZGluZ0NvbW1hbmQoZW11bGF0b3IpKTtcbiAgfVxuICBldmFsdWF0ZShpbnB1dCkge1xuICAgIGlmKERFQlVHKSBjb25zb2xlLmluZm8oXCJbRU1VTEFUT1JdIGV2YWx1YXRpbmcgJ1wiICsgaW5wdXQgKyBcIicuLlwiKTtcbiAgICAvLyB0ZW1wb3Jhcnkgc29sdXRpb24sIHNlZSBpc3N1ZSAjM1xuICAgIGNvbnN0IG91dHB1dCA9IFwiVGhhdCBkaWRuJ3Qgd29yay4uPGJyPlRyeSBzb21ldGhpbmcgZWxzZT9cIjtcbiAgICAvLyAkKHRoaXMuZWxlbWVudCkuZmluZChcIi5jb21tYW5kLWNvbnRhaW5lci50ZW1wXCIpLnJlbW92ZUNsYXNzKFwidGVtcFwiKTtcbiAgICB0aGlzLmNvbW1hbmRzLnB1c2goXG4gICAgICBuZXcgQ29tbWFuZChcbiAgICAgICAgbmV3IElucHV0KG5ldyBLZXlzdHJva2UoaW5wdXQsIFwid2hpdGVcIiwgMCkpLFxuICAgICAgICBuZXcgT3V0cHV0KFtcbiAgICAgICAgICBuZXcgTGluZShbbmV3IEtleXN0cm9rZShvdXRwdXQsIFwieWVsbG93XCIsIDApXSlcbiAgICAgICAgXSlcbiAgICAgIClcbiAgICApO1xuICAgIHRoaXMuZmFzdEVtdWxhdGUoKTtcbiAgfVxuICBjaGFuZ2VTdGF0ZShuZXdTdGF0ZSkge1xuICAgIHRoaXMuX3N0YXRlID0gbmV3U3RhdGU7XG4gICAgc3dpdGNoKG5ld1N0YXRlKSB7XG4gICAgICBjYXNlIDE6IC8vIGVtdWxhdGluZyBpbnB1dFxuICAgICAgICAvLyBnZXQgcmlkIG9mIGFlc3RoZXRpYywgdGVtcG9yYXJ5IGNvbW1hbmRzXG4gICAgICAgICQoXCIuY29tbWFuZC1jb250YWluZXIudGVtcFwiKS5yZW1vdmUoKTtcbiAgICAgICAgRW11bGF0b3IubG9nU3RhdGUobmV3U3RhdGUsIFwiZW11bGF0aW5nXCIpO1xuICAgICAgICAkKHRoaXMuZWxlbWVudClcbiAgICAgICAgLnJlbW92ZUNsYXNzKFwiaGlkZGVuIHdyaXRpbmcgcmVhZGluZyBpZGxlXCIpXG4gICAgICAgIC5hZGRDbGFzcyhcImVtdWxhdGluZ1wiKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6IC8vIHdyaXRpbmcgb3V0cHV0XG4gICAgICAgIEVtdWxhdG9yLmxvZ1N0YXRlKG5ld1N0YXRlLCBcIndyaXRpbmdcIik7XG4gICAgICAgIHRoaXMucGVuZGluZ0lucHV0ID0gXCJcIjtcbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpXG4gICAgICAgIC5yZW1vdmVDbGFzcyhcImhpZGRlbiBlbXVsYXRpbmcgcmVhZGluZyBpZGxlXCIpXG4gICAgICAgIC5hZGRDbGFzcyhcIndyaXRpbmdcIik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOiAvLyByZWFkaW5nIGlucHV0XG4gICAgICAgIEVtdWxhdG9yLmxvZ1N0YXRlKG5ld1N0YXRlLCBcInJlYWRpbmdcIik7XG4gICAgICAgICQodGhpcy5lbGVtZW50KVxuICAgICAgICAucmVtb3ZlQ2xhc3MoXCJoaWRkZW4gZW11bGF0aW5nIHdyaXRpbmcgaWRsZVwiKVxuICAgICAgICAuYWRkQ2xhc3MoXCJyZWFkaW5nXCIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNDogLy8gaGlkZGVuXG4gICAgICAgIEVtdWxhdG9yLmxvZ1N0YXRlKG5ld1N0YXRlLCBcImhpZGRlblwiKTtcbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpXG4gICAgICAgIC5yZW1vdmVDbGFzcyhcImVtdWxhdGluZyB3cml0aW5nIHJlYWRpbmcgaWRsZVwiKVxuICAgICAgICAuYWRkQ2xhc3MoXCJoaWRkZW5cIik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OiAvLyBpZGxlXG4gICAgICB0aGlzLl9zdGF0ZSA9IC0xO1xuICAgICAgICBFbXVsYXRvci5sb2dTdGF0ZShuZXdTdGF0ZSwgXCJpZGxlXCIpO1xuICAgICAgICAkKHRoaXMuZWxlbWVudClcbiAgICAgICAgLnJlbW92ZUNsYXNzKFwiaGlkZGVuIGVtdWxhdGluZyB3cml0aW5nIHJlYWRpbmdcIilcbiAgICAgICAgLmFkZENsYXNzKFwiaWRsZVwiKTtcbiAgICB9XG4gIH1cbiAgc3RhdGljIGxvZ1N0YXRlKHN0YXRlSWQsIHN0YXRlTmFtZSkge1xuICAgIGlmKERFQlVHKSBjb25zb2xlLmluZm8oXCJbRU1VTEFUT1JdIGNoYW5naW5nIHN0YXRlIHRvICdcIiArIHN0YXRlSWQgK1xuICAgIFwiJyxcXG4gaS5lLjogJ1wiICsgc3RhdGVOYW1lICsgXCInLi5cIik7XG4gIH1cbn1cblxuLy8gXCJzdGF0aWMgcHJvcGVydGllc1wiXG5FbXVsYXRvci5yZWFkaW5nU3BlZWQgPSA3MDsgLy8gbXMgcGVyIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlclxuRW11bGF0b3IuZW11bGF0aW9uU3BlZWQgPSAxMjA7IC8vIG1zIHBlciBjaGFyYWN0ZXJcbi8vIEVtdWxhdG9yLmVtdWxhdGlvblNwZWVkID0gMTAwMDAwMDA7IC8vIG1zIHBlciBjaGFyYWN0ZXJcbkVtdWxhdG9yLmVudGVyUGF1c2UgPSA1MDA7IC8vIHRpbWVvdXQgYmVmb3JlIFwicHJlc3NpbmcgZW50ZXJcIlxuRW11bGF0b3IuYmFja3NwYWNlUHJvYiA9IDAuMTsgLy8gcHJvYmFiaWxpdHkgb2YgdW5kb2luZyBhIGNoYXJhY3RlclxuRW11bGF0b3IuaWRsZVByb2IgPSAwLjI7IC8vIHByb2JhYmlsaXR5IG9mIGRvaW5nIG5vdGhpbmdcbkVtdWxhdG9yLmN1cnNvckludGVydmFsID0gNzAwOyAvLyBibGlua2luZyBpbnRlcnZhbCAobXMpXG4iLCJjbGFzcyBJbnB1dCB7XG4gIGNvbnN0cnVjdG9yKGlucHV0KSB7XG4gICAgdGhpcy5faW5wdXQgPSBpbnB1dDsgLy8gS2V5c3Ryb2tlIGluc3RhbmNlXG4gIH1cbiAgZW11bGF0ZShlbXVsYXRvciwgb3V0cHV0LCBxdWV1ZSkge1xuICAgIGVtdWxhdG9yLmNoYW5nZVN0YXRlKDEpO1xuICAgIGNvbnN0IHByZUVtdWxhdGlvbkh0bWwgPSAkKGVtdWxhdG9yLmVsZW1lbnQpLmh0bWwoKTtcbiAgICB0aGlzLl9pbnB1dC5lbXVsYXRlKGVtdWxhdG9yLCBvdXRwdXQsIHF1ZXVlLCBwcmVFbXVsYXRpb25IdG1sKTtcbiAgfVxuICBzdGF0aWMgZ2V0IGN1cnNvckh0bWwoKSB7XG4gICAgcmV0dXJuIFwiPGRpdiBjbGFzcz0nY3Vyc29yXCIgKyAoY3Vyc29yc0N1cnJlbnRseVNob3duID8gXCIgc2hvd25cIiA6IFwiXCIpICtcbiAgICBcIic+PC9kaXY+XCI7XG4gIH1cbn1cblxuLy8gXCJzdGF0aWMgcHJvcGVydGllc1wiXG5JbnB1dC5ET01PcGVuID0gXCI8ZGl2IGNsYXNzPSdpbnB1dCc+PGRpdiBjbGFzcz0nbGluZSc+XCI7XG5JbnB1dC5ET01DbG9zZSA9IFwiPC9kaXY+PC9kaXY+XCI7XG4iLCJjbGFzcyBLZXlzdHJva2Uge1xuICBjb25zdHJ1Y3Rvcih0ZXh0LCBjc3MsIHRhYnMpIHtcbiAgICBjb25zdCByZWFsVGV4dCA9IHRleHQ7IC8vIHByZXZlbnQgcmVwbGFjZW1lbnQgY2hhbmdlc1xuICAgIHRoaXMucmVhZExlbmd0aCA9IHRleHQucmVwbGFjZSgvXFxzL2csICcnKS5sZW5ndGg7XG4gICAgdGhpcy5fdGV4dCA9IHJlYWxUZXh0O1xuICAgIHRoaXMuX2NzcyA9IGNzcztcbiAgICB0aGlzLl90YWJzID0gdGFicztcbiAgfVxuICB0b1N0cmluZyhjdXRvZmYsIGlzSW5wdXQsIGVtdWxhdG9yLCBpbnNlcnRDdXJzb3IpIHtcbiAgICBsZXQgcmVwcmVzZW50YXRpb24gPSBpc0lucHV0ID8gSW5wdXQuRE9NT3BlbiArIEtleXN0cm9rZS5wcm9tcHQoZW11bGF0b3IpICtcbiAgICBLZXlzdHJva2UubG9jYXRpb24oZW11bGF0b3IpIDogXCJcIjtcbiAgICByZXByZXNlbnRhdGlvbiArPSBLZXlzdHJva2UuX0RPTU9wZW4odGhpcy5fY3NzKTtcbiAgICBpZih0eXBlb2YgY3V0b2ZmID09PSBcIm51bWJlclwiKSB7XG4gICAgICAvLyB1c2VkIGZvciBlbXVsYXRpb24gKGlucHV0KVxuICAgICAgcmVwcmVzZW50YXRpb24gKz0gdGhpcy5fdGV4dC5zdWJzdHJpbmcoMCwgY3V0b2ZmICsgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVzZWQgZm9yIHNpbXBsZSBkaXNwbGF5IGNhbGxzIChvdXRwdXQpXG4gICAgICByZXByZXNlbnRhdGlvbiArPSB0aGlzLl90ZXh0ICsgS2V5c3Ryb2tlLl90YWJTdHJpbmcodGhpcy5fdGFicyk7XG4gICAgfVxuICAgIHJlcHJlc2VudGF0aW9uICs9IEtleXN0cm9rZS5fRE9NQ2xvc2U7IC8vIGNsb3NlIG9mZiBrZXlzdHJva2VcbiAgICByZXByZXNlbnRhdGlvbiArPSBpbnNlcnRDdXJzb3IgPyBJbnB1dC5jdXJzb3JIdG1sIDogXCJcIjsgLy8gYWRkIGN1cnNvclxuICAgIHJlcHJlc2VudGF0aW9uICs9IGlzSW5wdXQgPyBJbnB1dC5ET01DbG9zZSA6IFwiXCI7XG4gICAgcmV0dXJuIHJlcHJlc2VudGF0aW9uO1xuICB9XG4gIGVtdWxhdGUoZW11bGF0b3IsIG91dHB1dCwgcXVldWUsIHByZUVtdWxhdGlvbkh0bWwpIHtcbiAgICB0aGlzLl90eXBlKGVtdWxhdG9yLCBvdXRwdXQsIHF1ZXVlLCBwcmVFbXVsYXRpb25IdG1sLCAwKTtcbiAgfVxuICBfdHlwZShlbXVsYXRvciwgb3V0cHV0LCBxdWV1ZSwgcHJlRW11bGF0aW9uSHRtbCwgY3VycmVudEN1dG9mZikge1xuICAgIC8vIHVwZGF0ZSBlbXVsYXRvciBodG1sXG4gICAgY29uc3QgcmVwcmVzZW50YXRpb24gPSBDb21tYW5kLkRPTU9wZW4oZmFsc2UpICtcbiAgICB0aGlzLnRvU3RyaW5nKGN1cnJlbnRDdXRvZmYsIHRydWUsIGVtdWxhdG9yLCB0cnVlKSArIENvbW1hbmQuRE9NQ2xvc2U7XG4gICAgJChlbXVsYXRvci5lbGVtZW50KS5odG1sKHByZUVtdWxhdGlvbkh0bWwgKyByZXByZXNlbnRhdGlvbik7XG4gICAgLy8gdXBkYXRlICYgY2FsbGJhY2tcbiAgICBpZihjdXJyZW50Q3V0b2ZmID49IHRoaXMuX3RleHQubGVuZ3RoIC0gMSkge1xuICAgICAgLy8gZW5kIHJlYWNoZWQuIHBhdXNlIGFuZCBzaG93IG91dHB1dFxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgb3V0cHV0LmVtdWxhdGUoXG4gICAgICAgICAgZW11bGF0b3IsIHByZUVtdWxhdGlvbkh0bWwsIHRoaXMudG9TdHJpbmcodm9pZCgwKSwgdHJ1ZSwgZW11bGF0b3IpXG4gICAgICAgICk7XG4gICAgICB9LmJpbmQodGhpcyksIEVtdWxhdG9yLmVudGVyUGF1c2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBsb3R0ZXJ5ID0gTWF0aC5yYW5kb20oKTtcbiAgICAgIGxldCBuZXdDdXRvZmYgPSBjdXJyZW50Q3V0b2ZmO1xuICAgICAgaWYobG90dGVyeSA8IEVtdWxhdG9yLmJhY2tzcGFjZVByb2IpIHtcbiAgICAgICAgLy8gdW5kbyBsYXN0IGNoYXJhY3RlclxuICAgICAgICBuZXdDdXRvZmYgPSBNYXRoLm1heCgwLCBjdXJyZW50Q3V0b2ZmIC0gMSk7XG4gICAgICB9IGVsc2UgaWYobG90dGVyeSA+PSBFbXVsYXRvci5iYWNrc3BhY2VQcm9iICsgRW11bGF0b3IuaWRsZVByb2IpIHtcbiAgICAgICAgLy8gXCJ0eXBlXCJcbiAgICAgICAgbmV3Q3V0b2ZmID0gTWF0aC5taW4oY3VycmVudEN1dG9mZiArIDEsIHRoaXMuX3RleHQubGVuZ3RoIC0gMSk7XG4gICAgICB9IC8vIGVsc2U6IGlkbGVcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX3R5cGUoZW11bGF0b3IsIG91dHB1dCwgcXVldWUsIHByZUVtdWxhdGlvbkh0bWwsIG5ld0N1dG9mZik7XG4gICAgICB9LmJpbmQodGhpcyksIEVtdWxhdG9yLmVtdWxhdGlvblNwZWVkKTtcbiAgICB9XG4gIH1cbiAgc3RhdGljIHByb21wdChlbXVsYXRvcikge1xuICAgIHJldHVybiBcIjxzcGFuIGNsYXNzPSdwcm9tcHQnPlwiICsgZW11bGF0b3IudXNlciArIFwiQFwiICsgZW11bGF0b3Iuc3lzICsgXCI8L3NwYW4+OlwiO1xuICB9XG4gIHN0YXRpYyBsb2NhdGlvbihlbXVsYXRvcikge1xuICAgIHJldHVybiBcIjxzcGFuIGNsYXNzPSdsb2NhdGlvbic+XCIgKyBlbXVsYXRvci5sb2NhdGlvbiArIFwiPC9zcGFuPiZuYnNwO1wiO1xuICB9XG4gIHN0YXRpYyBfRE9NT3Blbihjc3MpIHtcbiAgICByZXR1cm4gXCI8c3BhbiBjbGFzcz0nXCIgKyBjc3MgKyBcIic+XCI7XG4gIH1cbiAgc3RhdGljIF90YWJTdHJpbmcobikge1xuICAgIHJldHVybiBcIiZuYnNwO1wiLnJlcGVhdCg0ICogbik7XG4gIH1cbn1cblxuLy8gXCJzdGF0aWMgcHJvcGVydGllc1wiXG5LZXlzdHJva2UuX0RPTUNsb3NlID0gXCI8L3NwYW4+XCI7XG4iLCJjbGFzcyBMaW5lIHtcbiAgY29uc3RydWN0b3Ioa2V5c3Ryb2tlcykge1xuICAgIHRoaXMucmVhZExlbmd0aCA9IDA7XG4gICAgdGhpcy5fa2V5c3Ryb2tlcyA9IGtleXN0cm9rZXM7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGtleXN0cm9rZXMubGVuZ3RoOyBpKyspXG4gICAgICB0aGlzLnJlYWRMZW5ndGggKz0ga2V5c3Ryb2tlc1tpXS5yZWFkTGVuZ3RoO1xuICB9XG4gIHRvU3RyaW5nKGN1dG9mZiwgZGlzcGxheUN1cnNvcikge1xuICAgIGxldCByZXByZXNlbnRhdGlvbiA9IExpbmUuX0RPTU9wZW47XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuX2tleXN0cm9rZXMubGVuZ3RoOyBpKyspXG4gICAgICByZXByZXNlbnRhdGlvbiArPSB0aGlzLl9rZXlzdHJva2VzW2ldLnRvU3RyaW5nKCk7XG4gICAgaWYoZGlzcGxheUN1cnNvcikgcmVwcmVzZW50YXRpb24gKz0gSW5wdXQuY3Vyc29ySHRtbCgpO1xuICAgIHJldHVybiByZXByZXNlbnRhdGlvbiArIExpbmUuX0RPTUNsb3NlO1xuICB9XG59XG5cbi8vIFwic3RhdGljIHByb3BlcnRpZXNcIlxuTGluZS5fRE9NT3BlbiA9IFwiPGRpdiBjbGFzcz0nbGluZSc+XCI7XG5MaW5lLl9ET01DbG9zZSA9IFwiPC9kaXY+XCI7XG4iLCJjbGFzcyBPdXRwdXQge1xuICBjb25zdHJ1Y3RvcihvdXRwdXQpIHtcbiAgICB0aGlzLnJlYWRMZW5ndGggPSAwO1xuICAgIHRoaXMuX291dHB1dCA9IG91dHB1dDsgLy8gYXJyYXkgb2YgTGluZSBpbnN0YW5jZXNcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgb3V0cHV0Lmxlbmd0aDsgaSsrKVxuICAgICAgdGhpcy5yZWFkTGVuZ3RoICs9IG91dHB1dFtpXS5yZWFkTGVuZ3RoO1xuICB9XG4gIHRvU3RyaW5nKCkge1xuICAgIGxldCByZXByZXNlbnRhdGlvbiA9IE91dHB1dC5fRE9NT3BlbjtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5fb3V0cHV0Lmxlbmd0aDsgaSsrKVxuICAgICAgcmVwcmVzZW50YXRpb24gKz0gdGhpcy5fb3V0cHV0W2ldLnRvU3RyaW5nKCk7XG4gICAgcmV0dXJuIHJlcHJlc2VudGF0aW9uICsgT3V0cHV0Ll9ET01DbG9zZTtcbiAgfVxuICBwYXVzZUR1cmF0aW9uKCkge1xuICAgIGNvbnN0IGR1cmF0aW9uID0gdGhpcy5yZWFkTGVuZ3RoICogRW11bGF0b3IucmVhZGluZ1NwZWVkO1xuICAgIHJldHVybiBERUJVRyA/IGR1cmF0aW9uICogLjMgOiBkdXJhdGlvbjtcbiAgfVxuICBlbXVsYXRlKGVtdWxhdG9yLCBwcmVFbXVsYXRpb25IdG1sLCBpbnB1dFJlcHJlc2VudGF0aW9uKSB7XG4gICAgZW11bGF0b3IuY2hhbmdlU3RhdGUoMik7XG4gICAgdGhpcy53cml0ZShlbXVsYXRvciwgcHJlRW11bGF0aW9uSHRtbCwgaW5wdXRSZXByZXNlbnRhdGlvbik7XG4gICAgLy8gb24gdG8gdGhlIG5leHQgcm91bmRcbiAgICBlbXVsYXRvci5jaGFuZ2VTdGF0ZSgzKTtcbiAgICBpZihlbXVsYXRvci5jb21tYW5kcy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBuZXh0Q29tbWFuZCA9IGVtdWxhdG9yLmNvbW1hbmRzLnNwbGljZSgwLCAxKTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIG5leHRDb21tYW5kWzBdLmVtdWxhdGUoZW11bGF0b3IsIGVtdWxhdG9yLmNvbW1hbmRzKTtcbiAgICAgIH0sIHRoaXMucGF1c2VEdXJhdGlvbigpKTtcbiAgICB9XG4gIH1cbiAgd3JpdGUoZW11bGF0b3IsIHByZUVtdWxhdGlvbkh0bWwsIGlucHV0UmVwcmVzZW50YXRpb24pIHtcbiAgICAkKGVtdWxhdG9yLmVsZW1lbnQpLmh0bWwoXG4gICAgICBwcmVFbXVsYXRpb25IdG1sICsgQ29tbWFuZC5ET01PcGVuKGZhbHNlKSArIGlucHV0UmVwcmVzZW50YXRpb24gK1xuICAgICAgdGhpcy50b1N0cmluZygpICsgQ29tbWFuZC5ET01DbG9zZSArIENvbW1hbmQucGVuZGluZ0NvbW1hbmQoZW11bGF0b3IpXG4gICAgKTtcbiAgICBlbXVsYXRvci5zY3JvbGxCb3R0b20oKTtcbiAgfVxufVxuXG4vLyBcInN0YXRpYyBwcm9wZXJ0aWVzXCJcbk91dHB1dC5fRE9NT3BlbiA9IFwiPGRpdiBjbGFzcz0nb3V0cHV0Jz5cIjtcbk91dHB1dC5fRE9NQ2xvc2UgPSBcIjwvZGl2PlwiO1xuIiwiY29uc3QgREVCVUcgPSB0cnVlO1xyXG4iLCJjb25zdCBQQUNLQUdFX1RBRyA9IFwiW3Rlcm1pbmFsLWVtdWxhdG9yXSAtIFwiO1xubGV0IGN1cnNvcnNDdXJyZW50bHlTaG93biA9IHRydWU7XG5sZXQgY3Vyc29yQmxpbmtpbmc7XG5cbi8vIGV2ZW50IGxpc3RlbmVyc1xuaWYgKGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIpXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIHRlcm1pbmFsRW11bGF0b3JJbml0LCBmYWxzZSk7XG5lbHNlIGlmIChkb2N1bWVudC5hdHRhY2hFdmVudClcbiAgZG9jdW1lbnQuYXR0YWNoRXZlbnQoXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiwgdGVybWluYWxFbXVsYXRvckluaXQpO1xuZWxzZSB3aW5kb3cub25sb2FkID0gdGVybWluYWxFbXVsYXRvckluaXQ7XG5cbi8vIGNhbGxzIGNsaWVudCdzIGltcGxlbWVudGF0aW9ucyBhdCByaWdodCB0aW1lc1xuZnVuY3Rpb24gdGVybWluYWxFbXVsYXRvckluaXQoKSB7XG4gIGlmIChERUJVRykgY29uc29sZS5sb2coUEFDS0FHRV9UQUcgKyBcIkRPTSByZWFkeTsgaW5pdGlhbGlzaW5nIC4uLlwiKTtcbiAgLy8gc2ltdWxhdGUgY3Vyc29yIGJsaW5raW5nXG4gIGN1cnNvckJsaW5raW5nID0gc2V0SW50ZXJ2YWwoY3Vyc29yQmxpbmssIEVtdWxhdG9yLmN1cnNvckludGVydmFsKTtcbiAgLy8gd2FpdCBmb3IgcGFnZSBsb2FkXG4gIGlmICh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcilcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgdGVybWluYWxFbXVsYXRvclBhZ2Vsb2FkZWRXcmFwcGVyLCBmYWxzZSk7XG4gIGVsc2UgaWYgKHdpbmRvdy5hdHRhY2hFdmVudClcbiAgICB3aW5kb3cuYXR0YWNoRXZlbnQoXCJvbmxvYWRcIiwgdGVybWluYWxFbXVsYXRvclBhZ2Vsb2FkZWRXcmFwcGVyKTtcbiAgLy8gY2FsbCBET01SZWFkeVxuICBpZiAodHlwZW9mIHRlcm1pbmFsRW11bGF0b3JET01SZWFkeSA9PT0gXCJmdW5jdGlvblwiKVxuICAgIHJldHVybiB0ZXJtaW5hbEVtdWxhdG9yRE9NUmVhZHkoKTtcbiAgZWxzZSB7XG4gICAgY29uc29sZS53YXJuKFBBQ0tBR0VfVEFHICtcbiAgICAgIFwidGVybWluYWxFbXVsYXRvckRPTVJlYWR5KCkgc2hvdWxkIGJlIGRlZmluZWQhXCIpO1xuICAgIHJldHVybiAxO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRlcm1pbmFsRW11bGF0b3JQYWdlbG9hZGVkV3JhcHBlcigpIHtcbiAgaWYgKERFQlVHKSBjb25zb2xlLmxvZyhQQUNLQUdFX1RBRyArXG4gICAgXCJQYWdlIGxvYWRlZDsgaW5pdGlhbGlzaW5nIHRyaWdnZXIocykgLi4uXCIpO1xuICBpZiAodHlwZW9mIHRlcm1pbmFsRW11bGF0b3JQYWdlbG9hZGVkID09PSBcImZ1bmN0aW9uXCIpXG4gICAgcmV0dXJuIHRlcm1pbmFsRW11bGF0b3JQYWdlbG9hZGVkKCk7XG4gIGVsc2Uge1xuICAgIGNvbnNvbGUud2FybihQQUNLQUdFX1RBRyArXG4gICAgICBcInRlcm1pbmFsRW11bGF0b3JQYWdlTG9hZGVkKCkgc2hvdWxkIGJlIGRlZmluZWQhXCIpO1xuICAgIHJldHVybiAxO1xuICB9XG59XG5cbmZ1bmN0aW9uIGN1cnNvckJsaW5rKCkge1xuICBpZiAoY3Vyc29yc0N1cnJlbnRseVNob3duKSB7XG4gICAgJChcIi5pbnB1dCAubGluZSAuY3Vyc29yXCIpLnJlbW92ZUNsYXNzKFwic2hvd25cIik7XG4gICAgY3Vyc29yc0N1cnJlbnRseVNob3duID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgJChcIi5pbnB1dCAubGluZSAuY3Vyc29yXCIpLmFkZENsYXNzKFwic2hvd25cIik7XG4gICAgY3Vyc29yc0N1cnJlbnRseVNob3duID0gdHJ1ZTtcbiAgfVxufVxuIl19
