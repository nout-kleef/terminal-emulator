class Command{constructor(t,e){this.readLength=0,this._i=t,this._o=e,this.readLength=t.readLength+e.readLength}emulate(t,e){this._i.emulate(t,this._o,e)}fastEmulate(t){$(t.element).append(Command.DOMOpen(!1)+this._i._input.toString(this._i._input._text.length-1,!0,t,!1)+this._o.toString()+Command.DOMClose+Command.pendingCommand(t))}static pendingCommand(t){return Command.DOMOpen(!0)+Input.DOMOpen+Keystroke.prompt(t)+Keystroke.location(t)+t.pendingInput+Input.cursorHtml+Input.DOMClose+Command.DOMClose}static DOMOpen(t){return"<div class='command-container"+(t?" temp":"")+"'>"}}Command.DOMClose="</div>";class Emulator{constructor(t,e){this.user="root",this.sys="nout",this.location="~",this.pendingInput="",this.commands=t,this.element=e}emulate(){if(0===this.commands.length)return console.log("Emulate called on empty emulator. Aborting.."),1;this.commands.splice(0,1)[0].emulate(this,this.commands)}fastEmulate(){if(0===this.commands.length)return console.log("Fast emulate called on empty emulator. Aborting.."),1;for(;this.commands.length>0;){this.changeState(1),this.changeState(2),this.commands.splice(0,1)[0].fastEmulate(this),this.scrollBottom(),this.changeState(3)}}readUserInput(t){switch(!0){case 8===t.keyCode:this.scrollBottom(),this.undoChar(1);break;case t.keyCode>=65&&t.keyCode<=90:this.scrollBottom(),this.read(t.key);break;case 32===t.keyCode:this.scrollBottom(),this.read(" ");break;case 13===t.keyCode:this.scrollBottom(),this.evaluate(this.pendingInput);break;default:DEBUG&&console.log("unknown key pressed",t.keyCode,t)}}scrollBottom(){DEBUG&&console.log("scrolling to bottom of container");let t=$(this.element).parent();t.scrollTop(t.prop("scrollHeight"))}undoChar(t){this.pendingInput.slice(0,-t)}read(t){if(3!==this._state)return-1;DEBUG&&console.log("reading '"+t+"'.."),this.pendingInput+=t,$(".command-container.temp").replaceWith(Command.pendingCommand(emulator))}evaluate(t){DEBUG&&console.info("[EMULATOR] evaluating '"+t+"'..");this.commands.push(new Command(new Input(new Keystroke(t,"white",0)),new Output([new Line([new Keystroke("That didn't work..<br>Try something else?","yellow",0)])]))),this.fastEmulate()}changeState(t){switch(this._state=t,t){case 1:$(".command-container.temp").remove(),Emulator.logState(t,"emulating"),$(this.element).removeClass("hidden writing reading idle").addClass("emulating");break;case 2:Emulator.logState(t,"writing"),this.pendingInput="",$(this.element).removeClass("hidden emulating reading idle").addClass("writing");break;case 3:Emulator.logState(t,"reading"),$(this.element).removeClass("hidden emulating writing idle").addClass("reading");break;case 4:Emulator.logState(t,"hidden"),$(this.element).removeClass("emulating writing reading idle").addClass("hidden");break;default:this._state=-1,Emulator.logState(t,"idle"),$(this.element).removeClass("hidden emulating writing reading").addClass("idle")}}static logState(t,e){DEBUG&&console.info("[EMULATOR] changing state to '"+t+"',\n i.e.: '"+e+"'..")}}Emulator.readingSpeed=70,Emulator.emulationSpeed=120,Emulator.enterPause=500,Emulator.backspaceProb=.1,Emulator.idleProb=.2,Emulator.cursorInterval=700;class Input{constructor(t){this._input=t}emulate(t,e,n){t.changeState(1);const o=$(t.element).html();this._input.emulate(t,e,n,o)}static get cursorHtml(){return"<div class='cursor"+(cursorsCurrentlyShown?" shown":"")+"'></div>"}}Input.DOMOpen="<div class='input'><div class='line'>",Input.DOMClose="</div></div>";class Keystroke{constructor(t,e,n){const o=t;this.readLength=t.replace(/\s/g,"").length,this._text=o,this._css=e,this._tabs=n}toString(t,e,n,o){let a=e?Input.DOMOpen+Keystroke.prompt(n)+Keystroke.location(n):"";return a+=Keystroke._DOMOpen(this._css),a+="number"==typeof t?this._text.substring(0,t+1):this._text+Keystroke._tabString(this._tabs),a+=Keystroke._DOMClose,a+=o?Input.cursorHtml:"",a+=e?Input.DOMClose:""}emulate(t,e,n,o){this._type(t,e,n,o,0)}_type(t,e,n,o,a){const s=Command.DOMOpen(!1)+this.toString(a,!0,t,!0)+Command.DOMClose;if($(t.element).html(o+s),a>=this._text.length-1)setTimeout(function(){e.emulate(t,o,this.toString(void 0,!0,t))}.bind(this),Emulator.enterPause);else{const s=Math.random();let i=a;s<Emulator.backspaceProb?i=Math.max(0,a-1):s>=Emulator.backspaceProb+Emulator.idleProb&&(i=Math.min(a+1,this._text.length-1)),setTimeout(function(){this._type(t,e,n,o,i)}.bind(this),Emulator.emulationSpeed)}}static prompt(t){return"<span class='prompt'>"+t.user+"@"+t.sys+"</span>:"}static location(t){return"<span class='location'>"+t.location+"</span>&nbsp;"}static _DOMOpen(t){return"<span class='"+t+"'>"}static _tabString(t){return"&nbsp;".repeat(4*t)}}Keystroke._DOMClose="</span>";class Line{constructor(t){this.readLength=0,this._keystrokes=t;for(let e=0;e<t.length;e++)this.readLength+=t[e].readLength}toString(t,e){let n=Line._DOMOpen;for(let t=0;t<this._keystrokes.length;t++)n+=this._keystrokes[t].toString();return e&&(n+=Input.cursorHtml()),n+Line._DOMClose}}Line._DOMOpen="<div class='line'>",Line._DOMClose="</div>";class Output{constructor(t){this.readLength=0,this._output=t;for(let e=0;e<t.length;e++)this.readLength+=t[e].readLength}toString(){let t=Output._DOMOpen;for(let e=0;e<this._output.length;e++)t+=this._output[e].toString();return t+Output._DOMClose}pauseDuration(){const t=this.readLength*Emulator.readingSpeed;return DEBUG?.3*t:t}emulate(t,e,n){if(t.changeState(2),this.write(t,e,n),t.changeState(3),t.commands.length>0){const e=t.commands.splice(0,1);setTimeout(function(){e[0].emulate(t,t.commands)},this.pauseDuration())}}write(t,e,n){$(t.element).html(e+Command.DOMOpen(!1)+n+this.toString()+Command.DOMClose+Command.pendingCommand(t)),t.scrollBottom()}}Output._DOMOpen="<div class='output'>",Output._DOMClose="</div>";const DEBUG=!0,PACKAGE_TAG="[terminal-emulator] - ";let cursorBlinking,cursorsCurrentlyShown=!0;function terminalEmulatorInit(){return DEBUG&&console.log(PACKAGE_TAG+"DOM ready; initialising ..."),cursorBlinking=setInterval(cursorBlink,Emulator.cursorInterval),window.addEventListener?window.addEventListener("load",terminalEmulatorPageloadedWrapper,!1):window.attachEvent&&window.attachEvent("onload",terminalEmulatorPageloadedWrapper),"function"==typeof terminalEmulatorDOMReady?terminalEmulatorDOMReady():(console.warn(PACKAGE_TAG+"terminalEmulatorDOMReady() should be defined!"),1)}function terminalEmulatorPageloadedWrapper(){return DEBUG&&console.log(PACKAGE_TAG+"Page loaded; initialising trigger(s) ..."),"function"!=typeof $&&console.error(PACKAGE_TAG+"you need to load JQuery before loading me!"),"function"==typeof terminalEmulatorPageloaded?terminalEmulatorPageloaded():(console.warn(PACKAGE_TAG+"terminalEmulatorPageLoaded() should be defined!"),1)}function cursorBlink(){cursorsCurrentlyShown?($(".input .line .cursor").removeClass("shown"),cursorsCurrentlyShown=!1):($(".input .line .cursor").addClass("shown"),cursorsCurrentlyShown=!0)}document.addEventListener?document.addEventListener("DOMContentLoaded",terminalEmulatorInit,!1):document.attachEvent?document.attachEvent("onreadystatechange",terminalEmulatorInit):window.onload=terminalEmulatorInit;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
